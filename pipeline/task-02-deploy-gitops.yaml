apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-systemtest
spec:
  params:
  - name: buildRevision
  - name: environment
  - name: argo-app-name
  resources:
    inputs:
    - name: image
      type: image
    - name: source
      type: git
  stepTemplate:
    envFrom:
    - secretRef:
        name: argocd-env-secret
    env:
    - name: ARGOCD_SERVER
      value: argocd-server.argocd
  steps:
  - name: update-yaml
    image: alpine/git:v2.26.2
    #    image: mikefarah/yq:3.3.4
    #    command: ['yq', 'write', '-i', 'coffee-shop.yaml', '-d', '1', 'spec.template.spec.containers[0].image', "$(inputs.resources.image.url):$(inputs.params.buildRevision)"]
    workingDir: "/workspace/source/$(inputs.params.environment)/"
    script: |
      #!/usr/bin/env sh
      set -e

      echo "updating coffee-shop image to $(inputs.resources.image.url):$(inputs.params.buildRevision)"
      sed -i "s#$(inputs.resources.image.url):[a-zA-Z0-9]\\+#$(inputs.resources.image.url):$(inputs.params.buildRevision)#" coffee-shop.yaml

  - name: commit-push-changes-gitops
    image: alpine/git:v2.26.2
    workingDir: "/workspace/source/"
    script: |
      #!/usr/bin/env sh
      set -e

      git config --global user.email "tekton@tekton.dev"
      git config --global user.name "Tekton Pipeline"
      git add .
      git commit --allow-empty -m "[tekton] updating image to $(inputs.params.buildRevision)"
      eval $(ssh-agent)
      ssh-add ~/.ssh/id_*
      git push origin $(inputs.resources.source.revision)

  - name: wait-for-argocd-rollout
    image: argoproj/argocd:v1.7.7
    script: |
      #!/usr/bin/env sh
      set -e

      argocd app sync $(inputs.params.argo-app-name) --insecure
      argocd app wait $(inputs.params.argo-app-name) --health --insecure
---
#
#  steps:
#  - name: login
#    image: argoproj/argocd:$(params.argocd-version)
#    script: |
#      if [ -z $ARGOCD_AUTH_TOKEN ]; then
#        yes | argocd login $ARGOCD_SERVER --username=$ARGOCD_USERNAME --password=$ARGOCD_PASSWORD;
#      fi
#  - name: sync
#    image: argoproj/argocd:$(params.argocd-version)
#    script: |
#      argocd app sync $(params.application-name) --revision $(params.revision) $(params.flags)
#  - name: wait
#    image: argoproj/argocd:$(params.argocd-version)
#    script: |
#      argocd app wait $(params.application-name) --health $(params.flags)